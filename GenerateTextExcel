import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Iterator;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

public class GenerateExcel {
	private static XSSFWorkbook workbook;
	 private static Sheet sheet;
	 private static CellStyle style;
	 private static int rowNum;
	 private final static int SECTION = 0;
	 private final static int SUBSECTION = 1;
	 private final static int COLUMN = 2;
	public static void generateTestExcel(String fileName) throws Exception {
        System.out.println("getAndReadXml");
        
        FileInputStream refFile = new FileInputStream(new File("C:\\\\Users\\\\797956\\\\Documents\\\\XmlToExcel\\\\Reference.xlsx"));
        XSSFWorkbook refWorkbook = new XSSFWorkbook(refFile);
        XSSFSheet refSheet = refWorkbook.getSheetAt(0);
        
        File xmlFile = new File("C:\\Users\\797956\\Documents\\XmlToExcel\\"+fileName+".xml");
        initXlsx();
        sheet = workbook.getSheetAt(0);
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
        Document doc = dBuilder.parse(xmlFile);

        NodeList nList = doc.getElementsByTagName("section");
        System.out.println(nList.getLength());
        Iterator<Row> refRowIterator = refSheet.iterator();
        refRowIterator.next();
        
        for (int i = 0; i < nList.getLength(); i++) {
            System.out.println("Processing element " + (i+1) + "/" + nList.getLength());
            Node node = nList.item(i);
            String sectionName = node.getAttributes().getNamedItem("name").getNodeValue();
//            System.out.println(sectionName);	            
            if (node.getNodeType() == Node.ELEMENT_NODE) {
                Element element = (Element) node;
                NodeList subNodeList = element.getElementsByTagName("subsection");
                for (int j = 0; j < subNodeList.getLength(); j++) {
                    Node subNode = subNodeList.item(j);
                    String subsectionName = subNode.getAttributes().getNamedItem("name").getNodeValue();
//                    System.out.println(subsectionName);	                    
                    if (subNode.getNodeType() == Node.ELEMENT_NODE ) {
                        Element element1 = (Element) subNode;
                        NodeList childNodeList = element1.getElementsByTagName("column");
    	                for (int k = 0; k < childNodeList.getLength(); k++) {
    	                    Node childNode = childNodeList.item(k);
    	                    String columnName = childNode.getAttributes().getNamedItem("name").getNodeValue();
//    	                    System.out.println(columnName);	    	                    
    	                    Row row = sheet.createRow(rowNum++);
    	                    if (refRowIterator.hasNext())
    	                    {
    	                    	Row refRow = refRowIterator.next();
    	                    	Iterator<Cell> refCellIterator = refRow.cellIterator();
    	                    	Cell refCell = refCellIterator.next();
    	                    	Cell cell;
    	                    	if(refCell.getStringCellValue().equals(sectionName))
    		                    {
    	                    		System.out.println("Success");
    		                    	cell = row.createCell(SECTION);
    	    	                    cell.setCellValue(sectionName);
    	    	                }
    		                    else
    		                    {
    		                    	System.out.println("Changes..");
    		                    	cell = row.createCell(SECTION);
    	    	                    cell.setCellValue(sectionName);
    	    	                    cell.setCellStyle(style);
    		                    }
    	                    	refCell=refCellIterator.next();
    	                    	if(refCell.getStringCellValue().equals(subsectionName))
    		                    {
    		                    	System.out.println("Success");
    		                    	cell = row.createCell(SUBSECTION);
    		                    	cell.setCellValue(subsectionName);
    		                    }
    		                    else
    		                    {
    		                    	System.out.println("Changes..");
    		                    	cell = row.createCell(SUBSECTION);
    	    	                    cell.setCellValue(subsectionName);
    	    	                    cell.setCellStyle(style);
    		                    }
    	                    	refCell=refCellIterator.next();
    	                    	if(refCell.getStringCellValue().equals(columnName))
    		                    {
    		                    	System.out.println("Success");
    		                    	cell = row.createCell(COLUMN);
    	    	                    cell.setCellValue(columnName);
    		                    }
    		                    else
    		                    {
    		                    	System.out.println("Changes..");
    		                    	cell = row.createCell(COLUMN);
    	    	                    cell.setCellValue(columnName);
    	    	                    cell.setCellStyle(style);
    		                    }
    	                    	System.out.println("");
    	                    }
    	                }
                    }
                }
            }
//            System.out.println(IndexedColors.CORAL.getIndex());
        }
    try {
		FileOutputStream out = 
				new FileOutputStream(new File("C:\\Users\\797956\\Documents\\XmlToExcel\\"+fileName+".xlsx"));
		workbook.write(out);
		out.close();
		workbook.close();
		System.out.println("Excel written successfully..");
		
	} catch (FileNotFoundException exp) {
		exp.printStackTrace();
	} catch (IOException ex) {
		ex.printStackTrace();
	}
    }
    private static void initXlsx() {
    	workbook = new XSSFWorkbook();
		sheet = workbook.createSheet("Sample sheet");
        style = workbook.createCellStyle();
    	style.setFillBackgroundColor(IndexedColors.CORAL.getIndex());
    	style.setFillForegroundColor(IndexedColors.CORAL.getIndex());
    	style.setFillPattern(CellStyle.SOLID_FOREGROUND);
        style.setAlignment(CellStyle.ALIGN_CENTER);
		rowNum = 0;
        Row row = sheet.createRow(rowNum++);
        Cell cell = row.createCell(SECTION);
        cell.setCellValue("SECTION");

        cell = row.createCell(SUBSECTION);
        cell.setCellValue("SUBSECTION");

        cell = row.createCell(COLUMN);
        cell.setCellValue("COLUMN");
        
    }

}
