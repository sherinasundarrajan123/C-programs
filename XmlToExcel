import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Entity;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;

public class XmlToExcel {
	
	 private static XSSFWorkbook workbook;
	 private static Sheet sheet;
	    private static int rowNum;
	    private final static int SECTION = 0;
	    private final static int SUBSECTION = 1;
	    private final static int COLUMN = 2;
	    
	    public static void main(String[] args) throws Exception {
	        getAndReadXml();
	    }
	    
	    private static void getAndReadXml() throws Exception {
	        System.out.println("getAndReadXml");
	        File xmlFile = new File("E:\\Excels\\XmlFile.xml");
	        initXlsx();
	        sheet = workbook.getSheetAt(0);
	        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
	        DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
	        Document doc = dBuilder.parse(xmlFile);

	        NodeList nList = doc.getElementsByTagName("section");
	        System.out.println(nList.getLength());
	        for (int i = 0; i < nList.getLength(); i++) {
	            System.out.println("Processing element " + (i+1) + "/" + nList.getLength());
	            Node node = nList.item(i);
	            String sectionName = node.getAttributes().getNamedItem("name").getNodeValue();
	            System.out.println(sectionName);
	            
	            if (node.getNodeType() == Node.ELEMENT_NODE) {
	                Element element = (Element) node;
	                NodeList subNodeList = element.getElementsByTagName("subsection");
	                for (int j = 0; j < subNodeList.getLength(); j++) {
	                    Node subNode = subNodeList.item(j);
	                    String subsectionName = subNode.getAttributes().getNamedItem("name").getNodeValue();
	                    System.out.println(subsectionName);
////	                    Element subNodeElement = (Element)subNodeList .item(0);
////	                    NodeList childNodeList = subNodeElement.getChildNodes();
////	                    System.out.println(childNodeList.getLength());
////	                    for (int k = 0; k < childNodeList.getLength(); k++) {
////    	                    Node childNode = childNodeList.item(k);
////    	                    String columnName = childNode.getAttributes().getNamedItem("name").getNodeValue();
////    	                    System.out.println(columnName);
////    	                    
////    	                    Row row = sheet.createRow(rowNum++);
////    	                    Cell cell = row.createCell(SECTION);
////    	                    cell.setCellValue(sectionName);
////    	                    cell = row.createCell(SUBSECTION);
////    	                    cell.setCellValue(subsectionName);
////    	                    cell = row.createCell(COLUMN);
////    	                    cell.setCellValue(columnName);
////    	                }
//	                    
	                    if (subNode.getNodeType() == Node.ELEMENT_NODE) {
	                        Element element1 = (Element) subNode;	                        
	                        NodeList childNodeList = element.getElementsByTagName("column");
	    	                for (int k = 0; k < childNodeList.getLength(); k++) {
	    	                    Node childNode = childNodeList.item(k);
	    	                    String columnName = childNode.getAttributes().getNamedItem("name").getNodeValue();
	    	                    System.out.println(columnName);
	    	                    
	    	                    Row row = sheet.createRow(rowNum++);
	    	                    Cell cell = row.createCell(SECTION);
	    	                    cell.setCellValue(sectionName);
	    	                    cell = row.createCell(SUBSECTION);
	    	                    cell.setCellValue(subsectionName);
	    	                    cell = row.createCell(COLUMN);
	    	                    cell.setCellValue(columnName);
	    	                }
	                    }
	                }
	            }
	        }
	    
	    try {
			FileOutputStream out = 
					new FileOutputStream(new File("E:\\Excels\\JavaBooks1.xlsx"));
			workbook.write(out);
			out.close();
			System.out.println("Excel written successfully..");
			
		} catch (FileNotFoundException exp) {
			exp.printStackTrace();
		} catch (IOException ex) {
			ex.printStackTrace();
		}
	    }
	    private static void initXlsx() {
	    	workbook = new XSSFWorkbook();
			sheet = workbook.createSheet("Sample sheet");

	        CellStyle style = workbook.createCellStyle();
//	        Font boldFont = workbook.createFont();
//	        boldFont.setBoldweight("10");
//	        style.setFont(boldFont);
	        style.setAlignment(CellStyle.ALIGN_CENTER);
	        rowNum = 0;
	        Row row = sheet.createRow(rowNum++);
	        Cell cell = row.createCell(SECTION);
	        cell.setCellValue("SECTION");
	        cell.setCellStyle(style);

	        cell = row.createCell(SUBSECTION);
	        cell.setCellValue("SUBSECTION");
	        cell.setCellStyle(style);

	        cell = row.createCell(COLUMN);
	        cell.setCellValue("COLUMN");
	        cell.setCellStyle(style);
	    }
	    }


	    /**
	     * Initializes the POI workbook and writes the header row
	     */
	    

//	        cell = row.createCell(PRODUCT_NAME_COLUMN);
//	        cell.setCellValue("Product name");
//	        cell.setCellStyle(style);
//
//	        cell = row.createCell(PRODUCT_CODE_COLUMN);
//	        cell.setCellValue("Product code");
//	        cell.setCellStyle(style);
//
//	        cell = row.createCell(PRODUCT_MRL_COLUMN);
//	        cell.setCellValue("MRL");
//	        cell.setCellStyle(style);
//
//	        cell = row.createCell(APPLICATION_DATE_COLUMN);
//	        cell.setCellValue("Application Date");
//	        cell.setCellStyle(style);
//
//	    }
	
	
//	public static void main(String[] args) throws IOException {
//
//	XSSFWorkbook workbook = new XSSFWorkbook();
//		XSSFSheet sheet = workbook.createSheet("Sample sheet");
//	//Create a new row in current sheet
//	Row row = sheet.createRow(0);
//	//Create a new cell in current row
//	Cell cell1 = row.createCell(0);
//	//Set value to new value
//	String st="Sheri";
//	cell1.setCellValue((String)st);
////	cell.setCellValue((Double)11);
////}
//	try {
//		FileOutputStream out = 
//				new FileOutputStream(new File("E:\\Excels\\JavaBooks.xlsx"));
//		workbook.write(out);
//		out.close();
//		System.out.println("Excel written successfully..");
//		
//	} catch (FileNotFoundException exp) {
//		exp.printStackTrace();
//	} catch (IOException ex) {
//		ex.printStackTrace();
//	}
////	try (FileOutputStream outputStream = new FileOutputStream("C:\\JavaBooks")) {
////        workbook.write(outputStream);
////        
////        System.out.println("Done");
////    }
////	catch (Exception ee)
////	{
////		System.out.println("Errorrrrr");
////	}
//	try {
////		File infile=new File("C:\\JavaBooks.xlsx");
////		FilePermission permission = new FilePermission("E:\\Excels\\JavaBooks.xlsx", "read");
////		if (!infile.canRead()) {
////			   infile.setReadable(true);
////			}
////		
//		FileInputStream file = new FileInputStream("E:\\Excels\\JavaBooks.xlsx");
//		
//		//Get the workbook instance for XLS file 
//		workbook = new XSSFWorkbook(file);
//
//		//Get first sheet from the workbook
//		sheet = workbook.getSheetAt(0);
//		
//		//Iterate through each rows from first sheet
//		Iterator<Row> rowIterator = sheet.iterator();
//		while(rowIterator.hasNext()) {
//			row = rowIterator.next();
//			
//			//For each row, iterate through each columns
//			Iterator<Cell> cellIterator = row.cellIterator();
//			while(cellIterator.hasNext()) {
//				
//				Cell cell = cellIterator.next();
//				
//				switch(cell.getCellType()) {
//					case Cell.CELL_TYPE_BOOLEAN:
//						System.out.print(cell.getBooleanCellValue() + "\t\t");
//						break;
//					case Cell.CELL_TYPE_NUMERIC:
//						System.out.print(cell.getNumericCellValue() + "\t\t");
//						break;
//					case Cell.CELL_TYPE_STRING:
//						System.out.print(cell.getStringCellValue() + "\t\t");
//						break;
//				}
//			}
//			System.out.println("");
//		}
//		file.close();
//	} catch (FileNotFoundException e) {
//		e.printStackTrace();
//	} catch (IOException e) {
//		e.printStackTrace();
//	}
////	
//	}
//}
	
